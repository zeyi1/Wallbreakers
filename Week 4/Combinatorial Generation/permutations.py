"""
Procedure:
A permutation is generated by adding all numbers in every position.
Looping through the length of the list and using ls[:i] + [num] + ls[i:] achieves this idea.

Complexity:
n -> length of input list
Time: O(n!)
Space: O(n!)
"""

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        if not nums:
            return []
        
        result = [[]]
        
        for num in nums:
            permutations = []
            
            for curList in result:
                for i in range(len(curList) + 1):
                    new_perm = curList[:i] + [num] + curList[i:]
                    permutations.append(new_perm)
                    
            result = permutations
            
        return result
                
